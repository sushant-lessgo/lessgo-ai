generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String?
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  tokenId     String   @unique
  token       Token    @relation(fields: [tokenId], references: [value])
  title       String   @default("Untitled Project")
  status      String   @default("draft")
  content     Json?
  
  themeValues Json?        
  inputText   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
}

model Token {
  id        String    @id @default(cuid())
  value     String    @unique
  project   Project?
  createdAt DateTime  @default(now())
}


model PublishedPage {
  id          String   @id @default(cuid())
  userId      String   // Clerk User ID (external, not a foreign key)
  slug        String   @unique
  title       String?
  htmlContent String
  content     Json?
  themeValues Json?
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)

  // Optional fields for future use
  previewImage String?
  views        Int      @default(0)

  @@index([userId])
}

model TaxonomyEmbedding {
  id          String   @id @default(cuid())
  fieldType   String   // 'marketCategory', 'targetAudience', etc.
  value       String   // The actual taxonomy value
  embedding   Float[]  // OpenAI embedding vector
  metadata    Json?    // Additional info (group, description, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([fieldType, value])
  @@index([fieldType])
}

model FormSubmission {
  id            String   @id @default(cuid())
  userId        String   // Clerk User ID (owner of the form)
  publishedPageId String? // Optional - which published page the form was on
  formId        String   // The MVP form ID from the store
  formName      String   // Snapshot of form name at time of submission
  data          Json     // The actual form submission data
  ipAddress     String?  // Optional - visitor's IP
  userAgent     String?  // Optional - visitor's browser
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([formId])
  @@index([publishedPageId])
}

model UserIntegration {
  id            String   @id @default(cuid())
  userId        String   // Clerk User ID
  type          String   // 'convertkit', 'mailchimp', etc.
  name          String   // User-friendly name for the integration
  apiKey        String   // Encrypted API key
  isActive      Boolean  @default(true)
  settings      Json?    // Integration-specific settings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, type, name])
  @@index([userId])
}