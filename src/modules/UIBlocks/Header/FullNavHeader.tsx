import React, { useEffect, useState } from 'react';
import { useLayoutComponent } from '@/hooks/useLayoutComponent';
import { useEditStoreLegacy as useEditStore } from '@/hooks/useEditStoreLegacy';
import { LayoutSection } from '@/components/layout/LayoutSection';
import { LayoutComponentProps } from '@/types/storeTypes';
import HeaderLogo from '@/components/ui/HeaderLogo';
import NavigationEditor from '@/components/navigation/NavigationEditor';
import type { NavigationItem } from '@/types/store/state';

interface FullNavHeaderContent {
  logo?: string;
  nav_item_1?: string;
  nav_item_2?: string;
  nav_item_3?: string;
  nav_item_4?: string;
  nav_item_5?: string;
  nav_item_6?: string;
  nav_item_7?: string;
  nav_link_1?: string;
  nav_link_2?: string;
  nav_link_3?: string;
  nav_link_4?: string;
  nav_link_5?: string;
  nav_link_6?: string;
  nav_link_7?: string;
}

// Content schema - defines structure and defaults
const CONTENT_SCHEMA = {
  nav_item_1: { type: 'string' as const, default: 'Home' },
  nav_item_2: { type: 'string' as const, default: 'Products' },
  nav_item_3: { type: 'string' as const, default: 'Solutions' },
  nav_item_4: { type: 'string' as const, default: 'Features' },
  nav_item_5: { type: 'string' as const, default: 'Pricing' },
  nav_item_6: { type: 'string' as const, default: 'Resources' },
  nav_item_7: { type: 'string' as const, default: 'Contact' },
  nav_link_1: { type: 'string' as const, default: '#' },
  nav_link_2: { type: 'string' as const, default: '#products' },
  nav_link_3: { type: 'string' as const, default: '#solutions' },
  nav_link_4: { type: 'string' as const, default: '#features' },
  nav_link_5: { type: 'string' as const, default: '#pricing' },
  nav_link_6: { type: 'string' as const, default: '#resources' },
  nav_link_7: { type: 'string' as const, default: '#contact' },
};

const FullNavHeader: React.FC<LayoutComponentProps> = (props) => {
  const {
    sectionId,
    mode,
    blockContent,
    colorTokens,
    sectionBackground,
    backgroundType,
    handleContentUpdate
  } = useLayoutComponent<FullNavHeaderContent>({
    ...props,
    contentSchema: CONTENT_SCHEMA
  });
  const store = useEditStore();
  const [showNavigationEditor, setShowNavigationEditor] = useState(false);
  
  // Initialize navigation if not already done
  useEffect(() => {
    console.log('ðŸ§­ [NAV-DEBUG] FullNavHeader useEffect:', {
      hasNavigationConfig: !!store.navigationConfig,
      sectionsLength: store.sections?.length || 0,
      sections: store.sections
    });
    
    if (!store.navigationConfig) {
      console.log('ðŸ§­ [NAV-DEBUG] Calling initializeNavigation from FullNavHeader');
      store.initializeNavigation();
    } else {
      console.log('ðŸ§­ [NAV-DEBUG] Navigation already exists:', store.navigationConfig);
    }
  }, [store]);

  // Get navigation items from store, fallback to legacy content - direct store access
  const getNavItems = (): NavigationItem[] => {
    console.log('ðŸ§­ [NAV-DEBUG] Getting navigation items', {
      hasNavigationConfig: !!store.navigationConfig,
      navigationItems: store.navigationConfig?.items?.length || 0,
      lastUpdated: store.navigationConfig?.lastUpdated,
      blockContent
    });
    
    if (store.navigationConfig?.items && store.navigationConfig.items.length > 0) {
      console.log('ðŸ§­ [NAV-DEBUG] Using navigation config items:', store.navigationConfig.items);
      return store.navigationConfig.items.slice(0, 7); // Max 7 for FullNavHeader
    }
    
    console.log('ðŸ§­ [NAV-DEBUG] Falling back to legacy content schema');
    
    // Fallback to legacy content schema
    const fallbackItems = [
      { id: 'nav-1', label: blockContent.nav_item_1 || '', link: blockContent.nav_link_1 || '#', isAutoGenerated: false, order: 0 },
      { id: 'nav-2', label: blockContent.nav_item_2 || '', link: blockContent.nav_link_2 || '#', isAutoGenerated: false, order: 1 },
      { id: 'nav-3', label: blockContent.nav_item_3 || '', link: blockContent.nav_link_3 || '#', isAutoGenerated: false, order: 2 },
      { id: 'nav-4', label: blockContent.nav_item_4 || '', link: blockContent.nav_link_4 || '#', isAutoGenerated: false, order: 3 },
      { id: 'nav-5', label: blockContent.nav_item_5 || '', link: blockContent.nav_link_5 || '#', isAutoGenerated: false, order: 4 },
      { id: 'nav-6', label: blockContent.nav_item_6 || '', link: blockContent.nav_link_6 || '#', isAutoGenerated: false, order: 5 },
      { id: 'nav-7', label: blockContent.nav_item_7 || '', link: blockContent.nav_link_7 || '#', isAutoGenerated: false, order: 6 },
    ].filter(item => item.label);
    
    console.log('ðŸ§­ [NAV-DEBUG] Fallback items:', fallbackItems);
    return fallbackItems;
  };

  const navItems = getNavItems();

  const handleNavClick = (e: React.MouseEvent<HTMLAnchorElement>, link: string) => {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('ðŸ§­ [NAV-DEBUG] Navigation click:', { link, mode });
    
    // In edit mode, don't navigate - let text editing work
    if (mode === 'edit') {
      console.log('ðŸ§­ [NAV-DEBUG] In edit mode, skipping navigation');
      return;
    }
    
    if (link.startsWith('#')) {
      console.log('ðŸ§­ [NAV-DEBUG] Scrolling to section:', link);
      const element = document.querySelector(link);
      if (element) {
        // Account for sticky header height
        const headerHeight = 80; // Approximate height of sticky header
        const elementPosition = element.getBoundingClientRect().top + window.pageYOffset - headerHeight;
        
        window.scrollTo({
          top: elementPosition,
          behavior: 'smooth'
        });
        
        console.log('ðŸ§­ [NAV-DEBUG] Scroll initiated with offset');
      } else {
        console.log('ðŸ§­ [NAV-DEBUG] Element not found:', link);
      }
    } else {
      console.log('ðŸ§­ [NAV-DEBUG] External link, opening:', link);
      window.open(link, '_blank');
    }
  };


  return (
    <LayoutSection
      sectionId={sectionId}
      sectionType="FullNavHeader"
      backgroundType={backgroundType}
      sectionBackground={sectionBackground}
      mode={mode}
      className="sticky top-0 z-50 bg-white/95 backdrop-blur-sm border-b"
      innerClassName="py-4"
    >
      <nav className="flex items-center justify-between">
        <HeaderLogo 
          mode={mode}
          className="h-8 w-auto object-contain"
        />
        
        <div className="flex items-center justify-center flex-1">
          {mode === 'preview' ? (
            // Preview Mode: Simple clickable navigation
            <ul className="flex items-center gap-8">
              {navItems.map((navItem, index) => (
                <li key={navItem.id}>
                  <a 
                    href={navItem.link}
                    className="text-sm font-medium text-gray-700 hover:text-primary-600 transition-colors cursor-pointer"
                    onClick={(e) => handleNavClick(e, navItem.link)}
                  >
                    {navItem.label || `Nav Item ${index + 1}`}
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            // Edit Mode: Static display with prominent edit button
            <div className="flex items-center gap-6">
              <div className="flex items-center gap-4 px-3 py-2 bg-blue-50 border border-blue-200 rounded-md">
                <span className="text-sm text-blue-700 font-medium">Navigation:</span>
                <div className="flex gap-4">
                  {navItems.map((navItem, index) => (
                    <span key={navItem.id} className="text-sm text-blue-600">
                      {navItem.label || `Item ${index + 1}`}
                    </span>
                  ))}
                  {navItems.length === 0 && (
                    <span className="text-sm text-blue-500 italic">Auto-configured</span>
                  )}
                </div>
              </div>
              
              <button
                onClick={() => setShowNavigationEditor(true)}
                className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors"
                title="Edit navigation settings"
              >
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                Edit Navigation
              </button>
            </div>
          )}
        </div>
      </nav>
      
      {/* Navigation Editor Modal */}
      <NavigationEditor
        isVisible={showNavigationEditor}
        onClose={() => setShowNavigationEditor(false)}
        targetHeaderId={sectionId}
      />
    </LayoutSection>
  );
};

export default FullNavHeader;